
open import Category
import ElementaryProperties
open import FunctorDefs
open import Agda
open import FunctorProperties

open import Level
open import Agda.Primitive

open import Relation.Binary.PropositionalEquality hiding (Extensionality)
open import Relation.Binary.Structures

open import Axiom.Extensionality.Propositional

open import Data.Product

open CatBasics
open Category.Category

module Yoneda
  {‚Ñì : Level}
  (‚ÑÇ : Category (suc ‚Ñì) (‚Ñì))
  where

Agda' : Category (suc ‚Ñì) ‚Ñì
Agda' = Agda {‚Ñì} {‚Ñì}

‚ÑÇop : Category (suc ‚Ñì) ‚Ñì
‚ÑÇop = Op ‚ÑÇ

Rep : (A : Category.Obj ‚ÑÇop) ‚Üí Functor ‚ÑÇop Agda'
Rep A =
  record
  { act = Œª X ‚Üí Lift ‚Ñì (A ‚áí[ ‚ÑÇop ] X)
  ; fmap‚Ä≤ = Œª _ _ f ‚Üí lift Œª t ‚Üí lift (f ‚àò[ ‚ÑÇop ] lower t)
  ; fmap-id‚Ä≤ = Œª _ ‚Üí cong lift (fun-ext Œª x ‚Üí cong lift (Category.right-id ‚ÑÇ))
  ; fmap-‚àò‚Ä≤ = Œª _ _ _ _ _ ‚Üí cong lift (fun-ext (Œª x ‚Üí cong lift (Category.‚àò-assoc ‚ÑÇ)))
  }

-- Corep : (A : Category.Obj ‚ÑÇ) ‚Üí Functor ‚ÑÇ Agda'
-- Corep A =
--   record
--   { act = Œª X ‚Üí (X ‚áí[ ‚ÑÇ ] A)
--   ; fmap‚Ä≤ = Œª B C f ‚Üí Œª t ‚Üí ({!!} ‚àò[ ‚ÑÇ ] {!!})
--   ; fmap-id‚Ä≤ = Œª _ ‚Üí (fun-ext Œª x ‚Üí Category.right-id ‚ÑÇ)
--   ; fmap-‚àò‚Ä≤ = Œª _ _ _ _ _ ‚Üí (fun-ext (Œª x ‚Üí (Category.‚àò-assoc ‚ÑÇ)))
--   }


lower-Arr : ‚àÄ {A B} ‚Üí
  (Lift ‚Ñì A ‚áí[ Agda' ] Lift ‚Ñì B) ‚Üí
  (A ‚áí[ Agda' ] B)
lower-Arr f = lift Œª x ‚Üí lower (lower f (lift x))

_‚àò[A]_ : ‚àÄ {A B C} ‚Üí
  (Lift ‚Ñì B ‚áí[ Agda' ] Lift ‚Ñì C) ‚Üí
  (Lift ‚Ñì A ‚áí[ Agda' ] Lift ‚Ñì B) ‚Üí
  (A ‚áí[ Agda' ] C)
_‚àò[A]_ f g = (lower-Arr f ‚àò[ Agda' ] lower-Arr g)

Rep-fmap : ‚àÄ {A B} ‚Üí (Z : Category.Obj ‚ÑÇop) ‚Üí (A ‚áí[ ‚ÑÇop ] B) ‚Üí Functor.act (Rep Z) A ‚Üí (Z ‚áí[ ‚ÑÇop ] B)
Rep-fmap Z f = Œª x ‚Üí lower (lower (Functor.fmap (Rep Z) f) x)

-- Rep‚Åª¬π : Functor ‚ÑÇop Agda' ‚Üí Category.Obj ‚ÑÇop
-- Rep‚Åª¬π F =
--   let
--     p = Functor.fmap F (Category.id {!!})
--   in
--   {!!}

„Çà : Functor ‚ÑÇ [ ‚ÑÇop ,, Agda ]
„Çà =
  record
    { act = Œª x ‚Üí Rep x
    ; fmap‚Ä≤ = Œª A B f ‚Üí
            record
              { component = Œª x ‚Üí lift Œª x‚ÇÅ ‚Üí lift (lower x‚ÇÅ ‚àò[ ‚ÑÇop ] f)
              ; natural = Œª x y f‚ÇÅ ‚Üí
                        cong lift
                  (fun-ext Œª x‚ÇÅ ‚Üí
                    let
                      -- rep-fmap = 
                  --     q : comp Agda' (Œª x‚ÇÇ ‚Üí comp ‚ÑÇop x‚ÇÇ f) (Functor.fmap (Rep A) f‚ÇÅ) x‚ÇÅ
                      q : lower ((comp Agda' (lift (Œª x‚ÇÇ ‚Üí comp ‚ÑÇop x‚ÇÇ f))) (lower-Arr (Functor.fmap (Rep A) f‚ÇÅ))) (lower x‚ÇÅ)
                               ‚â°
                          -- (lower (lower (Functor.fmap (Rep A) f‚ÇÅ) x‚ÇÅ) ‚àò[ ‚ÑÇop ] f)
                          (Rep-fmap A f‚ÇÅ x‚ÇÅ ‚àò[ ‚ÑÇop ] f)
                      q = refl

                      q2 : (Rep-fmap A f‚ÇÅ x‚ÇÅ ‚àò[ ‚ÑÇop ] f)
                               ‚â°
                          ((f‚ÇÅ ‚àò[ ‚ÑÇop ] lower x‚ÇÅ) ‚àò[ ‚ÑÇop ] f)
                      q2 = refl


                      q3 : ((f‚ÇÅ ‚àò[ ‚ÑÇop ] lower x‚ÇÅ) ‚àò[ ‚ÑÇop ] f)
                               ‚â°
                           (f‚ÇÅ ‚àò[ ‚ÑÇop ] (lower x‚ÇÅ ‚àò[ ‚ÑÇop ] f))
                      q3 = ‚àò-assoc ‚ÑÇop
                        --------------------


                      w0 : (f‚ÇÅ ‚àò[ ‚ÑÇop ] (lower x‚ÇÅ ‚àò[ ‚ÑÇop ] f))
                                ‚â°
                           (Rep-fmap B f‚ÇÅ (lift (lower x‚ÇÅ ‚àò[ ‚ÑÇop ] f)))
                           -- (Rep-fmap B f‚ÇÅ (lower {!!}))
                      w0 = refl

                      w : (Rep-fmap B f‚ÇÅ (lift (lower x‚ÇÅ ‚àò[ ‚ÑÇop ] f)))
                               ‚â°
                          lower (lower (comp Agda' (Functor.fmap (Rep B) f‚ÇÅ) (lift (Œª x‚ÇÇ ‚Üí lift (comp ‚ÑÇop x‚ÇÇ f)))) (lower x‚ÇÅ))
                      w = refl
                    in
                    -- {!!}
                    trans (cong lift q) (trans (cong lift q2) (trans (cong lift q3) (trans (cong lift w0) (cong lift w))))
                    )
              }
    ; fmap-id‚Ä≤ = Œª A ‚Üí NatTrans-Œ∑ (fun-ext Œª x ‚Üí cong lift (fun-ext Œª y ‚Üí cong lift (left-id ‚ÑÇ)))
    -- ; fmap-id‚Ä≤ = Œª A ‚Üí NatTrans-Œ∑ (fun-ext Œª x ‚Üí fun-ext Œª y ‚Üí left-id ‚ÑÇ)
    ; fmap-‚àò‚Ä≤ = Œª A B C f g ‚Üí NatTrans-Œ∑ (fun-ext Œª x ‚Üí cong lift (fun-ext Œª y ‚Üí
        let
          Œ± : NatTrans (Rep B) (Rep C)
          Œ± = (record
                    { component = Œª x‚ÇÅ ‚Üí lift Œª x‚ÇÇ ‚Üí lift (comp ‚ÑÇop (lower x‚ÇÇ) f)
                    ; natural = Œª x‚ÇÅ y‚ÇÅ f‚ÇÅ ‚Üí cong lift (fun-ext (Œª x‚ÇÇ ‚Üí trans (cong lift (‚àò-assoc ‚ÑÇop)) refl))
                    })

          Œ≤ : NatTrans (Rep A) (Rep B)
          Œ≤ = (record
                    { component = Œª x‚ÇÅ ‚Üí lift Œª x‚ÇÇ ‚Üí lift (comp ‚ÑÇop (lower x‚ÇÇ) g)
                    ; natural = Œª x‚ÇÅ y‚ÇÅ f‚ÇÅ ‚Üí cong lift (fun-ext (Œª x‚ÇÇ ‚Üí trans (cong lift (‚àò-assoc ‚ÑÇop)) refl))
                    })
          p : lower (NatTrans.component
                (comp [ ‚ÑÇop ,, Agda' ] Œ± Œ≤) x) y
                  ‚â°
              lift (comp ‚ÑÇop (comp ‚ÑÇop (lower y) g) f)
          p = refl

          q0 : ‚àÄ {A‚Ä≤ B‚Ä≤ C‚Ä≤} {u : A‚Ä≤ ‚áí[ ‚ÑÇ ] B‚Ä≤} {v : B‚Ä≤ ‚áí[ ‚ÑÇ ] C‚Ä≤} ‚Üí comp ‚ÑÇop u v ‚â° comp ‚ÑÇ v u
          q0 = refl

          q : comp ‚ÑÇ f  (comp ‚ÑÇ g  (lower y)) ‚â° comp ‚ÑÇop (lower y) (comp ‚ÑÇ f g)
          q = trans (sym (‚àò-assoc ‚ÑÇ)) (sym q0)
        in
        trans p (cong lift q)))
    }

Agda-lift : ‚àÄ {‚Ñì} {ùîª : Category (lsuc ‚Ñì) ‚Ñì} {A B X Y} ‚Üí
  (F : Functor ùîª (Agda {‚Ñì} {‚Ñì})) ‚Üí
  actf F X ‚Üí
  ((A ‚áí[ ùîª ] B) ‚Üí (actf F X ‚áí[ Agda {‚Ñì} {‚Ñì} ] actf F Y)) ‚Üí
  (Lift ‚Ñì (A ‚áí[ ùîª ] B) ‚áí[ Agda {‚Ñì} {‚Ñì} ] actf F Y)
Agda-lift F F-x f = lift (Œª z ‚Üí lower (f (lower z)) F-x)

-- Agda-lift-NatTrans : ‚àÄ {‚Ñì} {ùîª : Category (lsuc ‚Ñì) ‚Ñì} ‚Üí
--   (F G : Functor ùîª (Agda {‚Ñì} {‚Ñì})) ‚Üí
--   NatTrans {!!} {!!}
-- Agda-lift-NatTrans F G =
--   record { component = Œª x ‚Üí Agda-lift F {!!} (Functor.fmap F) ; natural = {!!} }
--   -- Agda-lift F c (Functor.fmap F) ‚àò[ Agda ] Functor.fmap G
--   --   ‚â°
--   -- Functor.fmap F ‚àò[ Agda ] Agda-lift F

„Çà-NatTrans : ‚àÄ {X : Functor (Op ‚ÑÇ) Agda} ‚Üí
  ‚àÄ {c} ‚Üí
  actf X c ‚Üí
  NatTrans (actf „Çà c) X
„Çà-NatTrans {X} {c} X-c =
  record
    { component = Œª y ‚Üí
                lift (Œª z ‚Üí lower (Functor.fmap X (lower z)) X-c)
    ; natural = Œª x y f ‚Üí
      cong lift (fun-ext Œª z ‚Üí
        let
          q : lower (Functor.fmap X f) (lower (Functor.fmap X (lower z)) X-c)
                ‚â°
              lower ((Functor.fmap X f) ‚àò[ Agda ] (Functor.fmap X (lower z))) X-c
          q = refl

          q2 : lower ((Functor.fmap X f) ‚àò[ Agda ] (Functor.fmap X (lower z))) X-c
                ‚â°
               lower (Functor.fmap X (f ‚àò[ ‚ÑÇop ] lower z)) X-c
          q2 = cong‚ÇÇ lower (Functor.fmap-‚àò X) refl
        in
        trans (trans refl (sym q2)) (sym q))
    }

module _ where
  open import ElementaryProperties (Agda {suc (suc ‚Ñì)} {‚Ñì})

  open import AgdaHom ([ Op ‚ÑÇ ,, Agda' ])

  „Çà-fmap-id : ‚àÄ {c c‚Ä≤ : Obj ‚ÑÇop} {f : c ‚áí[ ‚ÑÇop ] c‚Ä≤} ‚Üí
    lower (Functor.fmap (actf „Çà c) f) (lift (id ‚ÑÇop)) ‚â° lift f
  „Çà-fmap-id {c} {c‚Ä≤} {f} =
    let
      p : (Functor.fmap (actf „Çà c) f)
            ‚â°
          (Functor.fmap (Rep c) f)
      p = refl

      p2 : Functor.fmap (Rep c) f ‚â° (lift Œª t ‚Üí lift (f ‚àò[ ‚ÑÇop ] lower t))
      p2 = refl
    in
    trans (cong‚ÇÇ lower (trans p p2) refl) (cong lift (Category.right-id ‚ÑÇop))

  Yoneda-lemma : ‚àÄ {X : Functor (Op ‚ÑÇ) Agda} ‚Üí
    ‚àÄ {c : Category.Obj ‚ÑÇ} ‚Üí
      let
        lifted = Lift (suc (suc ‚Ñì))
      in
        (Hom (actf „Çà c) X)
          ‚âÖ
        (lifted (actf X c))
  Yoneda-lemma {X} {c} =
    lift (Œª x ‚Üí
      let
        hc = NatTrans.component x c
        q = lower hc (lift (Category.id ‚ÑÇop))
      in lift q) ,

    lift (Œª x ‚Üí
      let
        w = lower (Functor.fmap X (Category.id ‚ÑÇop)) (lower x)
      in
      „Çà-NatTrans w) ,

    cong lift (fun-ext Œª z ‚Üí
      let
        p : „Çà-NatTrans {X} {c}
              (lower (Functor.fmap X (id ‚ÑÇop))
                (lower (NatTrans.component z c) (lift (id ‚ÑÇop))))
              ‚â°
            „Çà-NatTrans
              (lower (Functor.fmap X (id ‚ÑÇop) ‚àò[ Agda ] NatTrans.component z c) (lift (id ‚ÑÇop)))
        p = refl

        p2 : „Çà-NatTrans {X} {c}
              (lower (Functor.fmap X (id ‚ÑÇop) ‚àò[ Agda ] NatTrans.component z c) (lift (id ‚ÑÇop)))
               ‚â°
             „Çà-NatTrans
              (lower ((NatTrans.component z c) ‚àò[ Agda ] (Functor.fmap (actf „Çà c) (id ‚ÑÇop))) (lift (id ‚ÑÇop)))
        p2 = cong „Çà-NatTrans (cong‚ÇÇ lower (sym (NatTrans.natural z c c (id ‚ÑÇop))) refl)

        p3‚Ä≤ : (NatTrans.component z c) ‚àò[ Agda ] (Functor.fmap (actf „Çà c) (id ‚ÑÇop))
                ‚â° NatTrans.component z c ‚àò[ Agda ] Category.id Agda
        p3‚Ä≤ = cong (Œª w ‚Üí NatTrans.component z c ‚àò[ Agda ] w) (Functor.fmap-id (actf „Çà c))

        p3‚Ä≤‚Ä≤ : (NatTrans.component z c) ‚àò[ Agda ] (Functor.fmap (actf „Çà c) (id ‚ÑÇop))
                ‚â° NatTrans.component z c
        p3‚Ä≤‚Ä≤ = trans p3‚Ä≤ (Category.right-id Agda)

        p3 : „Çà-NatTrans {X} {c}
              (lower ((NatTrans.component z c) ‚àò[ Agda ] (Functor.fmap (actf „Çà c) (id ‚ÑÇop))) (lift (id ‚ÑÇop)))
               ‚â°
             „Çà-NatTrans (lower (NatTrans.component z c) (lift (id ‚ÑÇop)))
        p3 = cong „Çà-NatTrans (cong‚ÇÇ lower p3‚Ä≤‚Ä≤ refl)

        p4 : „Çà-NatTrans (lower (NatTrans.component z c) (lift (id ‚ÑÇop)))
               ‚â° z
        p4 = NatTrans-Œ∑ (fun-ext Œª x ‚Üí cong lift (fun-ext Œª x‚ÇÅ ‚Üí
          let
            q : lower (Functor.fmap X (lower x‚ÇÅ)) (lower (NatTrans.component z c) (lift (id ‚ÑÇop)))
                  ‚â°
                lower (Functor.fmap X (lower x‚ÇÅ) ‚àò[ Agda ] NatTrans.component z c) (lift (id ‚ÑÇop))
            q = refl

            q2 : lower (Functor.fmap X (lower x‚ÇÅ) ‚àò[ Agda ] NatTrans.component z c) (lift (id ‚ÑÇop))
                   ‚â°
                 lower (NatTrans.component z x ‚àò[ Agda ] Functor.fmap (actf „Çà c) (lower x‚ÇÅ)) (lift (id ‚ÑÇop))
            q2 = cong‚ÇÇ lower (sym (NatTrans.natural z c x (lower x‚ÇÅ))) refl

            q3 : lower (NatTrans.component z x ‚àò[ Agda ] Functor.fmap (actf „Çà c) (lower x‚ÇÅ)) (lift (id ‚ÑÇop))
                    ‚â°
                  lower (NatTrans.component z x) (lower (Functor.fmap (actf „Çà c) (lower x‚ÇÅ)) (lift (id ‚ÑÇop)))
            q3 = refl

            q4 : lower (NatTrans.component z x) (lower (Functor.fmap (actf „Çà c) (lower x‚ÇÅ)) (lift (id ‚ÑÇop)))
                     ‚â°
                   lower (NatTrans.component z x) x‚ÇÅ
            q4 = cong‚ÇÇ lower {NatTrans.component z x} refl („Çà-fmap-id {c} {x} {lower x‚ÇÅ})
          in
          trans q (trans q2 (trans q3 q4))))

        q5 : ‚àÄ {z} ‚Üí lower (Functor.fmap X {c} (id ‚ÑÇop)) z ‚â° z
        q5 = trans (cong‚ÇÇ lower (Functor.fmap-id X) refl) refl

        p5 : „Çà-NatTrans {X} (lower (Functor.fmap X (id ‚ÑÇop)) (lower (NatTrans.component z c) (lift (id ‚ÑÇop))))
               ‚â°
             „Çà-NatTrans     (lower (NatTrans.component z c) (lift (id ‚ÑÇop)))
        p5 = cong „Çà-NatTrans q5
      in
      trans p5 p4) ,

    cong lift (fun-ext Œª z ‚Üí
      let
        q5 : ‚àÄ {z} ‚Üí lower (Functor.fmap X {c} (id ‚ÑÇop)) z ‚â° z
        q5 = trans (cong‚ÇÇ lower (Functor.fmap-id X) refl) refl
      in
      trans (cong lift q5) (cong lift q5))
